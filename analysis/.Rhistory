library(edge)
install.packages("edge")
BiocInstaller::biocLite("edge")
# Load time series data package R
# source("https://bioconductor.org/biocLite.R")
# biocLite("edge")
library("edge")
library("ggplot2")
library("splines")
# Import the data
data(endotoxin)
# Look at the different components of the data
head(endotoxin$class) # Stating whether control or endotoxin
head(endotoxin$endoexpr) # This is a data frame of expression. The columns correspond to time points 1-6 for each person. For example, columns 1-6 are for individual 1 at time points 0, 2, 4, 6, and 24 hours. The rows correspond to the gene expression for 500 genes
head(endotoxin$ind) # Individuals 1-8
head(endotoxin$time) # Time points for each of the individuals
# Rearrange endotoxin so it is easier to work with when plotting
endotoxin_class <- rbind(endotoxin$ind, endotoxin$time, endotoxin$class, endotoxin$endoexpr)
endotoxin_class <- as.data.frame(endotoxin_class)
endotoxin_class_plot <- t(endotoxin_class)
endotoxin_class_plot <- as.data.frame(endotoxin_class_plot)
endoexpr <- endotoxin$endoexpr
class <- endotoxin$class
ind <- endotoxin$ind
time <- endotoxin$time
endoexpr <- endotoxin$endoexpr
class <- endotoxin$class
ind <- endotoxin$ind
time <- endotoxin$time
# Create a graph for the second gene. Note: The expression values from the second gene has endotoxin_class_plot$V5 because the first 3 columns are not expression values. Therefore 3 columns + gene 2 = endotoxin_class_plot$V5
ggplot(data = endotoxin_class_plot, aes(y = endotoxin_class_plot$V5, x = endotoxin_class_plot$V2)) + geom_point(aes(color = factor(endotoxin_class_plot$V3, labels = c("Control", "Endotoxin")))) + labs(x = "Time (hours)", y = "Expression", title = "Expression over time for Gene 2") + scale_color_discrete(name = "Group")
# Create a graph for gene 108
ggplot(data = endotoxin_class_plot, aes(y = endotoxin_class_plot$V111, x = endotoxin_class_plot$V2)) + geom_point(aes(color = factor(endotoxin_class_plot$V3, labels = c("Control", "Endotoxin")))) + labs(x = "Time (hours)", y = "Expression", title = "Expression over time for Gene 108") + scale_color_discrete(name = "Group")
# Create a graph for gene 1
ggplot(data = endotoxin_class_plot, aes(y = endotoxin_class_plot$V4, x = endotoxin_class_plot$V2)) + geom_point(aes(color = factor(endotoxin_class_plot$V3, labels = c("Control", "Endotoxin")))) + labs(x = "Time (hours)", y = "Expression", title = "Expression over time for Gene 108") + scale_color_discrete(name = "Group")
cov <- data.frame(ind = ind, tme = time, grp = class)
head(cov)
# Null model: make the basis matrix for natural cubic splines
null_model <- ~grp + ns(tme, df = 2, intercept = FALSE)
# Full model: make the basis matrix for natural cubic splines
full_model <- ~grp + ns(tme, df = 2, intercept = FALSE) + (grp):ns(tme, df = 2, intercept = FALSE)
de_obj <- build_models(data = endoexpr, cov = cov, full.model = full_model, null.model = null_model)
slotNames(de_obj)
summary(de_obj)
head(exprs(de_obj))
head(pData(de_obj))
head(nullMatrix(de_obj))
head(fullMatrix(de_obj))
sig_results <- qvalueObj(de_odp)
# See the names of the slots
names(sig_results)
# See the p-values for each of the genes
head(sig_results$pvalues)
# See the q-values for each of the genes
head(sig_results$qvalues)
# Look at the local false discovery rates (lfdr)
head(sig_results$lfdr)
# See pi0
head(sig_results$pi0)
# Plot the results of the bootstrap
hist(sig_results)
sig_results <- qvalueObj(de_odp)
de_odp <- odp(de_obj, bs.its = 50, verbose = FALSE, n.mods = 50)
summary(de_odp)
sig_results <- qvalueObj(de_odp)
# See the names of the slots
names(sig_results)
# See the p-values for each of the genes
head(sig_results$pvalues)
# See the q-values for each of the genes
head(sig_results$qvalues)
# Look at the local false discovery rates (lfdr)
head(sig_results$lfdr)
# See pi0
head(sig_results$pi0)
# Plot the results of the bootstrap
hist(sig_results)
p_value_endo_genes_edge <- as.data.frame(sig_results$pvalues)
dim(p_value_endo_genes_edge)
rownames(p_value_endo_genes_edge) <- c(1:500)
q_value_endo_genes_edge <- as.data.frame(sig_results$qvalues)
dim(q_value_endo_genes_edge)
rownames(q_value_endo_genes_edge) <- c(1:500)
write.table(p_value_endo_genes_edge,
"../data/p_value_endo_genes_edge_data.txt", sep = "\t")
getwd()
BiocInstaller::biocLite("maSigPro")
library("maSigPro")
# Load the data
# From the maSigPro vignette
data(NBdata)
head(NBdata)
data(NBdesign)
head(NBdesign)
endotoxin_data <- read.delim("../data/endotoxin_data.txt")
# Make a design matrix
d <- make.design.matrix(NBdesign)
# Look at the design matrix
head(d$dis)
# Look at the assignment of regression variables to experimental groups
d$groups.vector
# We are using theta = 10
# Compute a regression fit for each gene. Comupte a p-value associated with the F-statistic of the model (FDR = 10%)
NB_p_vector <- p.vector(NBdata, d, counts = TRUE, theta = 10, Q = 0.10, MT.adjust = "BH")
# Find the number of significant genes
NB_p_vector$i
# Find the p-value at the 10% false discovery control level
NB_p_vector$p.adjusted
# A matrix with the significant genes and their expression values
head(NB_p_vector$SELEC)
# Execute the stepwise (forward) regression. At each regression step, the p-value of each variable is computed and variables get in/out when the p-value is lower/higher than the given cutoff (alfa).
NB_t_stat <- T.fit(NB_p_vector)
# p-value of the regression ANOVA, R-squared of the model, and p-value of the regression coefficients of the selected variables
head(NB_t_stat$sol)
get_NB_genes <- get.siggenes(NB_t_stat, rsq = 0.2, var = "groups")
names(get_NB_genes$sig.genes)
get_NB_genes$summary
get_NB_genes$sig.genes$Group.2vsGroup.1
Gene1 <- NBdata[rownames(NBdata) == "Gene1", ]
PlotGroups(Gene1, edesign = NBdesign)
# Add the regression curve computed for this gene to the plot
PlotGroups(Gene1, edesign = NBdesign, show.fit = T, dis = d$dis, groups.vector = d$groups.vector)
endotoxin_data <- rbind(endotoxin_data[25:46, ], endotoxin_data[1:24, ])
endo_data <- rbind(endotoxin_data[1,-(1:3)], endotoxin_data[7,-(1:3)], endotoxin_data[11,-(1:3)], endotoxin_data[17,-(1:3)], endotoxin_data[2,-(1:3)], endotoxin_data[8,-(1:3)], endotoxin_data[12,-(1:3)], endotoxin_data[18,-(1:3)], endotoxin_data[4,-(1:3)], endotoxin_data[14,-(1:3)], endotoxin_data[20,-(1:3)], endotoxin_data[5,-(1:3)], endotoxin_data[15,-(1:3)], endotoxin_data[21,-(1:3)], endotoxin_data[6,-(1:3)], endotoxin_data[10,-(1:3)], endotoxin_data[16,-(1:3)], endotoxin_data[22,-(1:3)], endotoxin_data[3,-(1:3)], endotoxin_data[9,-(1:3)], endotoxin_data[13,-(1:3)], endotoxin_data[19,-(1:3)], endotoxin_data[23,-(1:3)], endotoxin_data[29,-(1:3)], endotoxin_data[35,-(1:3)], endotoxin_data[41,-(1:3)], endotoxin_data[24,-(1:3)], endotoxin_data[30,-(1:3)], endotoxin_data[36,-(1:3)], endotoxin_data[42,-(1:3)], endotoxin_data[26,-(1:3)], endotoxin_data[32,-(1:3)], endotoxin_data[38,-(1:3)], endotoxin_data[44,-(1:3)], endotoxin_data[27,-(1:3)], endotoxin_data[33,-(1:3)], endotoxin_data[40,-(1:3)], endotoxin_data[45,-(1:3)], endotoxin_data[28,-(1:3)], endotoxin_data[34,-(1:3)], endotoxin_data[41,-(1:3)], endotoxin_data[46,-(1:3)], endotoxin_data[25,-(1:3)], endotoxin_data[31,-(1:3)], endotoxin_data[37,-(1:3)], endotoxin_data[43,-(1:3)])
t_endo_data <- t(endo_data)
rownames(t_endo_data) <- c(1:500)
colnames(t_endo_data) <- c("G1.T1.1", "G1.T2.1", "G1.T6.1", "G1.T3.1","G1.T4.1", "G1.T5.1", "G1.T1.2", "G1.T2.2", "G1.T6.2", "G1.T5.2", "G1.T1.3", "G1.T2.3", "G1.T6.3", "G1.T3.3","G1.T4.3", "G1.T5.3","G1.T1.4", "G1.T2.4", "G1.T6.4", "G1.T3.4","G1.T4.4", "G1.T5.4", "G2.T1.1", "G2.T2.1", "G2.T6.1", "G2.T3.1","G2.T4.1", "G2.T5.1", "G2.T1.2", "G2.T2.2", "G2.T6.2", "G2.T3.2", "G2.T4.2","G2.T5.2", "G2.T1.3", "G2.T2.3", "G2.T6.3", "G2.T3.3","G2.T4.3", "G2.T5.3","G2.T1.4", "G2.T2.4", "G2.T6.4", "G2.T3.4","G2.T4.4", "G2.T5.4")
dim(t_endo_data)
head(t_endo_data)
endo_design1 <- c(0,0,0,0,2,2,2,2,4,4,4,6,6,6,9,9,9,9,24,24,24,24,0,0,0,0,2,2,2,2,4,4,4,4,6,6,6,6,9,9,9,9,24,24,24,24)
endo_design2 <- c(1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12)
#endo_design1 <- array(1:46, dim = c(46,1))
#endo_design2 <- endotoxin_data[,2]
endo_design <- cbind(endo_design1, endo_design2)
# Group 1 (controls)
group10 <- array(1, dim = c(1,22))
group11 <- array(0, dim = c(1,24))
group1 <- cbind(group10, group11)
# Group 2 (cases)
group20 <- array(0, dim = c(1,22))
group21 <- array(1, dim = c(1,24))
group2 <- cbind(group20, group21)
group12 <- rbind(group1, group2)
t_group12 <- t(group12)
final_endo_design <- cbind(endo_design, t_group12)
colnames(final_endo_design) <- c("Time", "Replicate", "Group.1", "Group.2")
rownames(final_endo_design) <- c("G1.T1.1", "G1.T2.1", "G1.T6.1", "G1.T3.1","G1.T4.1", "G1.T5.1", "G1.T1.2", "G1.T2.2", "G1.T6.2", "G1.T5.2", "G1.T1.3", "G1.T2.3", "G1.T6.3", "G1.T3.3","G1.T4.3", "G1.T5.3","G1.T1.4", "G1.T2.4", "G1.T6.4", "G1.T3.4","G1.T4.4", "G1.T5.4", "G2.T1.1", "G2.T2.1", "G2.T6.1", "G2.T3.1","G2.T4.1", "G2.T5.1", "G2.T1.2", "G2.T2.2", "G2.T6.2", "G2.T3.2", "G2.T4.2","G2.T5.2", "G2.T1.3", "G2.T2.3", "G2.T6.3", "G2.T3.3","G2.T4.3", "G2.T5.3","G2.T1.4", "G2.T2.4", "G2.T6.4", "G2.T3.4","G2.T4.4", "G2.T5.4")
#colnames(t_endo_data) <- rownames(final_endo_design)
library("Hmisc")
library("formattable")
install.packages("formattable")
