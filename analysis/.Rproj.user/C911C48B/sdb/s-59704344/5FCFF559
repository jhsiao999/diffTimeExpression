{
    "collab_server" : "",
    "contents" : "---\ntitle: \"time_series_example_maSigPro\"\nauthor: \"Lauren Blake\"\ndate: \"July 22, 2016\"\noutput:\n  html_document:\n    css: ../layout/floating-toc.css\n    toc: true\n---\n\n**Last updated:** `r Sys.Date()`\n\n**Code version:** `r system(\"git log -1 --format='%H'\", intern = TRUE)`\n\n```{r chunk-options, include=FALSE}\nsource(\"../layout/chunk-options.R\")\n```\n\n\nThis is an example of using the package maSigPro. It was originally created to find significant gene expression profile differences in time course microarray data. It was later revised to be able to run on expression data from RNA-seq (see http://www.ncbi.nlm.nih.gov/pubmed/16481333 and http://www.ncbi.nlm.nih.gov/pubmed/24894503, respectively). \n\n\n```{r}\n# Load the libraries\n\n# source(\"http://bioconductor.org/biocLite.R\")\n# biocLite(\"maSigPro\")\nlibrary(\"maSigPro\")\n\n# Load the data\n\n# From the maSigPro vignette\ndata(NBdata)\nhead(NBdata)\ndata(NBdesign)\nhead(NBdesign)\n\n# We will also run this using the endotoxin_data from the edge vignette\n\nendotoxin_data <- read.delim(\"../data/endotoxin_data.txt\")\n```\n\n\n## Using the maSigPro vignette\n\n```{r}\n# Make a design matrix\n\nd <- make.design.matrix(NBdesign)\n\n# Look at the design matrix\n\nhead(d$dis)\n\n# Look at the assignment of regression variables to experimental groups\n\nd$groups.vector\n\n# We are using theta = 10\n\n# Compute a regression fit for each gene. Comupte a p-value associated with the F-statistic of the model (FDR = 10%)\n\nNB_p_vector <- p.vector(NBdata, d, counts = TRUE, theta = 10, Q = 0.10, MT.adjust = \"BH\")\n\n# Find the number of significant genes\n\nNB_p_vector$i\n\n# Find the p-value at the 10% false discovery control level\n\nNB_p_vector$p.adjusted\n\n# A matrix with the significant genes and their expression values\n\nhead(NB_p_vector$SELEC)\n\n# Execute the stepwise (forward) regression. At each regression step, the p-value of each variable is computed and variables get in/out when the p-value is lower/higher than the given cutoff (alfa). \n\nNB_t_stat <- T.fit(NB_p_vector)\n\n# p-value of the regression ANOVA, R-squared of the model, and p-value of the regression coefficients of the selected variables\n\nhead(NB_t_stat$sol)\n\n# Obtaining lists of significant genes for each experimental group. We can set and R-squared value so that the models must be greater than 0.2.\n\nget_NB_genes <- get.siggenes(NB_t_stat, rsq = 0.2, var = \"groups\")\n\n# Get the lists of significant genes\n\n  # The first list (Group.1) contains genes whose expression is significantly different from a 0 profile in the reference group. \n  # The second list (Group.2vsGroup.1) contains differentially expressed curves.  We are most interested in the second list because it contains genes whose profiles for the experimental group is different from the reference group. \n\nnames(get_NB_genes$sig.genes)\n\nget_NB_genes$summary\n\nget_NB_genes$sig.genes$Group.2vsGroup.1\n\n# Group into 4 clusters\n\n# see.genes(get_NB_genes$sig.genes, k = 4)\n\n# If we had multiple comparisons (e.g. human, chimpanzee, and rhesus), we could use this function to compare DE genes from different sets of pairwise comparisons\n\n# suma2Venn(get_NB_genes$summary[,c(2:3)])\n\n# Plot the expression values with regression curve\nGene1 <- NBdata[rownames(NBdata) == \"Gene1\", ]\nPlotGroups(Gene1, edesign = NBdesign)\n\n# Add the regression curve computed for this gene to the plot\nPlotGroups(Gene1, edesign = NBdesign, show.fit = T, dis = d$dis, groups.vector = d$groups.vector)\n\n```\n\n## Using the endotoxin data\n\n### Make the endotoxin data in the same format as the NBdata and NBdesign\n\n```{r}\n\n# Change endotoxin data at the onset so that controls are listed first and cases are listed second\n\nendotoxin_data <- rbind(endotoxin_data[25:46, ], endotoxin_data[1:24, ])\n\n# Make the expression data matrix\n\nendo_data <- rbind(endotoxin_data[1,-(1:3)], endotoxin_data[7,-(1:3)], endotoxin_data[11,-(1:3)], endotoxin_data[17,-(1:3)], endotoxin_data[2,-(1:3)], endotoxin_data[8,-(1:3)], endotoxin_data[12,-(1:3)], endotoxin_data[18,-(1:3)], endotoxin_data[4,-(1:3)], endotoxin_data[14,-(1:3)], endotoxin_data[20,-(1:3)], endotoxin_data[5,-(1:3)], endotoxin_data[15,-(1:3)], endotoxin_data[21,-(1:3)], endotoxin_data[6,-(1:3)], endotoxin_data[10,-(1:3)], endotoxin_data[16,-(1:3)], endotoxin_data[22,-(1:3)], endotoxin_data[3,-(1:3)], endotoxin_data[9,-(1:3)], endotoxin_data[13,-(1:3)], endotoxin_data[19,-(1:3)], endotoxin_data[23,-(1:3)], endotoxin_data[29,-(1:3)], endotoxin_data[35,-(1:3)], endotoxin_data[41,-(1:3)], endotoxin_data[24,-(1:3)], endotoxin_data[30,-(1:3)], endotoxin_data[36,-(1:3)], endotoxin_data[42,-(1:3)], endotoxin_data[26,-(1:3)], endotoxin_data[32,-(1:3)], endotoxin_data[38,-(1:3)], endotoxin_data[44,-(1:3)], endotoxin_data[27,-(1:3)], endotoxin_data[33,-(1:3)], endotoxin_data[40,-(1:3)], endotoxin_data[45,-(1:3)], endotoxin_data[28,-(1:3)], endotoxin_data[34,-(1:3)], endotoxin_data[41,-(1:3)], endotoxin_data[46,-(1:3)], endotoxin_data[25,-(1:3)], endotoxin_data[31,-(1:3)], endotoxin_data[37,-(1:3)], endotoxin_data[43,-(1:3)])\n\n\nt_endo_data <- t(endo_data)\n\nrownames(t_endo_data) <- c(1:500)\n\n# Note: missing time points 4 and 6 for individual 6\n\ncolnames(t_endo_data) <- c(\"G1.T1.1\", \"G1.T2.1\", \"G1.T6.1\", \"G1.T3.1\",\"G1.T4.1\", \"G1.T5.1\", \"G1.T1.2\", \"G1.T2.2\", \"G1.T6.2\", \"G1.T5.2\", \"G1.T1.3\", \"G1.T2.3\", \"G1.T6.3\", \"G1.T3.3\",\"G1.T4.3\", \"G1.T5.3\",\"G1.T1.4\", \"G1.T2.4\", \"G1.T6.4\", \"G1.T3.4\",\"G1.T4.4\", \"G1.T5.4\", \"G2.T1.1\", \"G2.T2.1\", \"G2.T6.1\", \"G2.T3.1\",\"G2.T4.1\", \"G2.T5.1\", \"G2.T1.2\", \"G2.T2.2\", \"G2.T6.2\", \"G2.T3.2\", \"G2.T4.2\",\"G2.T5.2\", \"G2.T1.3\", \"G2.T2.3\", \"G2.T6.3\", \"G2.T3.3\",\"G2.T4.3\", \"G2.T5.3\",\"G2.T1.4\", \"G2.T2.4\", \"G2.T6.4\", \"G2.T3.4\",\"G2.T4.4\", \"G2.T5.4\")\n\ndim(t_endo_data)\nhead(t_endo_data)\n\n# Make a matrix that contains the information that will be used in a design matrix.\n# Note: for some weird reason, you need time to be the first (leftmost) column\n\nendo_design1 <- c(0,0,0,0,2,2,2,2,4,4,4,6,6,6,9,9,9,9,24,24,24,24,0,0,0,0,2,2,2,2,4,4,4,4,6,6,6,6,9,9,9,9,24,24,24,24)\n\n#endo_design2 <- c(1,2,3,4,1,2,3,4,1,3,4,1,3,4,1,2,3,4,1,2,3,4, 5,6,7,8,5,6,7,8,5,6,7,8,5,6,7,8,5,6,7,8,5,6,7,8)\n\nendo_design2 <- c(1,1,1,1,2,2,2,2,3,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12)\n\n#endo_design1 <- array(1:46, dim = c(46,1))\n#endo_design2 <- endotoxin_data[,2]\nendo_design <- cbind(endo_design1, endo_design2)\n\n# Make two columns, one for Group.1 (cases but it could be something like chimps) and Group.2 (controls but it could be something like humans)\n\n# Group 1 (controls)\ngroup10 <- array(1, dim = c(1,22))\ngroup11 <- array(0, dim = c(1,24))\ngroup1 <- cbind(group10, group11)\n\n# Group 2 (cases)\ngroup20 <- array(0, dim = c(1,22))\ngroup21 <- array(1, dim = c(1,24))\ngroup2 <- cbind(group20, group21)\n\ngroup12 <- rbind(group1, group2)\nt_group12 <- t(group12)\n\nfinal_endo_design <- cbind(endo_design, t_group12)\n\ncolnames(final_endo_design) <- c(\"Time\", \"Replicate\", \"Group.1\", \"Group.2\")\n\nrownames(final_endo_design) <- c(\"G1.T1.1\", \"G1.T2.1\", \"G1.T6.1\", \"G1.T3.1\",\"G1.T4.1\", \"G1.T5.1\", \"G1.T1.2\", \"G1.T2.2\", \"G1.T6.2\", \"G1.T5.2\", \"G1.T1.3\", \"G1.T2.3\", \"G1.T6.3\", \"G1.T3.3\",\"G1.T4.3\", \"G1.T5.3\",\"G1.T1.4\", \"G1.T2.4\", \"G1.T6.4\", \"G1.T3.4\",\"G1.T4.4\", \"G1.T5.4\", \"G2.T1.1\", \"G2.T2.1\", \"G2.T6.1\", \"G2.T3.1\",\"G2.T4.1\", \"G2.T5.1\", \"G2.T1.2\", \"G2.T2.2\", \"G2.T6.2\", \"G2.T3.2\", \"G2.T4.2\",\"G2.T5.2\", \"G2.T1.3\", \"G2.T2.3\", \"G2.T6.3\", \"G2.T3.3\",\"G2.T4.3\", \"G2.T5.3\",\"G2.T1.4\", \"G2.T2.4\", \"G2.T6.4\", \"G2.T3.4\",\"G2.T4.4\", \"G2.T5.4\")\n#colnames(t_endo_data) <- rownames(final_endo_design)\n\n```\n\n### Make design matrix using maSigPro commands\n\n```{r}\n# Make a design matrix of values. It will generate values for different values of time and the interaction of time and group (0 iif control and time^n*1 iif case). The default here is to make df = 2; however, since we have 6 time points, we could go up to degree = 5 (# of time points - 1, as discussed in the maSigPro User's Guide page 5)\n\nmatrix_endo_design <- make.design.matrix(final_endo_design, degree = 5)\n#rownames(matrix_endo_design$edesign) <- c(\"G1.T1.1\", \"G1.T2.1\", \"G1.T6.1\", \"G1.T3.1\",\"G1.T4.1\", \"G1.T5.1\", \"G1.T1.2\", \"G1.T2.2\", \"G1.T6.2\", \"G1.T5.2\", \"G1.T1.3\", \"G1.T2.3\", \"G1.T6.3\", \"G1.T3.3\",\"G1.T4.3\", \"G1.T5.3\",\"G1.T1.4\", \"G1.T2.4\", \"G1.T6.4\", \"G1.T3.4\",\"G1.T4.4\", \"G1.T5.4\", \"G2.T1.1\", \"G2.T2.1\", \"G2.T6.1\", \"G2.T3.1\",\"G2.T4.1\", \"G2.T5.1\", \"G2.T1.2\", \"G2.T2.2\", \"G2.T6.2\", \"G2.T3.2\", \"G2.T4.2\",\"G2.T5.2\", \"G2.T1.3\", \"G2.T2.3\", \"G2.T6.3\", \"G2.T3.3\",\"G2.T4.3\", \"G2.T5.3\",\"G2.T1.4\", \"G2.T2.4\", \"G2.T6.4\", \"G2.T3.4\",\"G2.T4.4\", \"G2.T5.4\")\n# Look at the design matrix\n\nhead(matrix_endo_design$dis)\nhead(matrix_endo_design$edesign)\n\n  # This generates a matrix with the headers of Group.2vsGroup.1, Time, Time*Group.2 (Group.2 = 1 iif a case), Time^2, Time^2xGroup.2, etc. \n\n# Look at the assignment of regression variables to experimental groups. The output matches the format of the examples in the maSigPro User's Guide. \n\nmatrix_endo_design$groups.vector\n\n```\n\n### Find significant genes\n\nThis step identifies the significant genes by computing a regression fit for each gene and also the p-value associated with the F-statistic of the model. We can then set our threshold for significant genes. \n\n```{r}\n# Exercise step 1 of the two-step regression procedure\n\n# We are using theta = 10. We can check if this is close to the actual value by using edgeR; however, the results \n\n# Compute a regression fit for each gene. Comupte a p-value associated with the F-statistic of the model (FDR = 10%). Note, it fits regression models for each gene but in \"batches\" of 100 genes. \n\nendo_p_vector <- p.vector(t_endo_data, \n                          matrix_endo_design, \n                          counts = TRUE, theta = 10, Q = 0.10, MT.adjust = \"BH\")\n\n# Save unadjusted p-values for comparison\nhead(endo_p_vector$p.vector)\n\n# svae output if output has not been saved already\nif (!file.exists(\"../data/p_value_maSigPro_df_5.txt\")) {\nwrite.table(endo_p_vector$p.vector, \n            \"../data/p_value_maSigPro_df_5.txt\", sep=\"\\t\")\n}\n\n\n# Find the number of significant genes at FDR 10%\n\nendo_p_vector$i\n\n# Find the p-value (of the F statistic of the model) at the 10% false discovery control level\n\nhead(endo_p_vector$p.adjusted)\n\n# Make a vector of the adjusted p-values so that we can compare them\n\np_value_endo_genes_masigpro <- as.data.frame(endo_p_vector$p.adjusted)\nrownames(p_value_endo_genes_masigpro) <- c(1:500)\n\n# A matrix with the significant genes and their expression values\n\nhead(endo_p_vector$SELEC)\n\n```\n\n## Find the significant coefficients for the significant genes (stepwise regression)\n\nThe significant genes were identified in the previous section. We can now apply a variable selection procedure to find the significant variables for each gene. This can mean that there is a different number of significant coefficients and therefore a different model for each gene. The author's highlight the flexibility of the method in their paper introducing this package. \n\n\n```{r}\n# Execute the stepwise (forward) regression. At each regression step, the p-value of each variable is computed and variables get in/out when the p-value is lower/higher than the given cutoff (alfa). \n\nendo_t_stat <- T.fit(endo_p_vector)\n\n# p-value of the regression ANOVA, R-squared of the model, and p-value of the regression coefficients of the selected variables\n\nhead(endo_t_stat$sol)\n\n# Obtaining lists of significant genes for each experimental group. We can set and R-squared value so that the models must be greater than 0.2.\n\nendo_sig_genes <- get.siggenes(endo_t_stat, rsq = 0.2, var = \"groups\")\n\n# Get the lists of significant genes\n\n  # The first list (Group.1) contains genes whose expression is significantly different from a 0 profile in the reference group. \n  # The second list (Group.2vsGroup.1) contains differentially expressed curves.  We are most interested in the second list because it contains genes whose profiles for the experimental group is different from the reference group. \n\nnames(endo_sig_genes$sig.genes)\n\nendo_sig_genes$summary\n\nhead(endo_sig_genes$sig.genes$Group.2vsGroup.1)\n\nendo_sig_genes$summary$Group.2vsGroup.1\n\n# Add the regression curve computed for this gene to the plot\n\n#Gene2 <- t_endo_data[rownames(t_endo_data) == \"2\", ]\n#PlotGroups(Gene2, edesign = matrix_endo_design$edesign, repvec = final_endo_design[,2], show.fit = T, step.method = \"forward\", show.lines = F, dis = matrix_endo_design$dis, groups.vector = matrix_endo_design$groups.vector)\n\n\n```\n\n## Plotting with maSigPro\n\n```{r}\n# Group into 4 clusters \n\n#(Note: this generates an X11() error when run on Midway but when run on a local computer or cluster that allows for a pop-up window in R, it can generate plots that have show the general patterns of the clusters)\n\n# see.genes(endo_sig_genes$sig.genes$Group.2vsGroup.1, k = 4)\n\n# Plot the expression values without the regression curve. Unlike see.genes, this does not generate an error when running on Midway. \n\n# Gene 2 (declared significant by maSigPro)\n\nGene2 <- t_endo_data[rownames(t_endo_data) == \"2\", ]\nPlotGroups(Gene2, edesign = final_endo_design, show.lines = F)\n\n# Plot the expression values without the regression curve but with lines connecting the median values for each group at each timepoint\nGene2 <- t_endo_data[rownames(t_endo_data) == \"2\", ]\nPlotGroups(Gene2, edesign = final_endo_design, show.lines = T)\n\n# Plot the expression values with the regression curve\n\n# Sample genes (Note: when degree = 3, use 287 and 205. When degree = 5, use 108, 205, 445)\nGene2 <- t_endo_data[rownames(t_endo_data) == \"2\", ]\nPlotGroups(Gene2, edesign = final_endo_design, show.fit = T, dis = matrix_endo_design$dis, groups.vector = matrix_endo_design$groups.vector, show.lines = F)\n\n# Sample genes/visualizations to compare to edge\n\n# Gene 108 \nGene108 <- t_endo_data[rownames(t_endo_data) == \"108\", ]\nPlotGroups(Gene108, edesign = final_endo_design, show.fit = T, dis = matrix_endo_design$dis, groups.vector = matrix_endo_design$groups.vector, show.lines = F)\n\n# Gene 1 (not declared significant by maSigPro)\nGene1 <- t_endo_data[rownames(t_endo_data) == \"1\", ]\nPlotGroups(Gene1, edesign = final_endo_design, show.fit = T, dis = matrix_endo_design$dis, groups.vector = matrix_endo_design$groups.vector, show.lines = F)\n\n\n```\n\n### Test if theta = 10 is a good approximation using edgeR\n\n\n## Compare results from maSigPro when degree = 2 and degree = 5\n\nThe goal of this section is to explore the extent to which the choice of degree number affects the results. In the above analysis, we degree = 5 because this is the total # of timepoints - 1. Now, we are going to compare degree = 5 with degree = 2 because we want to avoid potential overfitting. \n\n```{r}\n\n# Do everything the same until you have to specify the degree #\n\nmatrix_endo_design <- make.design.matrix(final_endo_design, degree = 2)\n#rownames(matrix_endo_design$edesign) <- c(\"G1.T1.1\", \"G1.T2.1\", \"G1.T6.1\", \"G1.T3.1\",\"G1.T4.1\", \"G1.T5.1\", \"G1.T1.2\", \"G1.T2.2\", \"G1.T6.2\", \"G1.T5.2\", \"G1.T1.3\", \"G1.T2.3\", \"G1.T6.3\", \"G1.T3.3\",\"G1.T4.3\", \"G1.T5.3\",\"G1.T1.4\", \"G1.T2.4\", \"G1.T6.4\", \"G1.T3.4\",\"G1.T4.4\", \"G1.T5.4\", \"G2.T1.1\", \"G2.T2.1\", \"G2.T6.1\", \"G2.T3.1\",\"G2.T4.1\", \"G2.T5.1\", \"G2.T1.2\", \"G2.T2.2\", \"G2.T6.2\", \"G2.T3.2\", \"G2.T4.2\",\"G2.T5.2\", \"G2.T1.3\", \"G2.T2.3\", \"G2.T6.3\", \"G2.T3.3\",\"G2.T4.3\", \"G2.T5.3\",\"G2.T1.4\", \"G2.T2.4\", \"G2.T6.4\", \"G2.T3.4\",\"G2.T4.4\", \"G2.T5.4\")\n\n# Look at the design matrix\n\nhead(matrix_endo_design$dis)\nhead(matrix_endo_design$edesign)\n\n  # This generates a matrix with the headers of Group.2vsGroup.1, Time, Time*Group.2 (Group.2 = 1 iif a case), Time^2, Time^2xGroup.2, etc. \n\n# Look at the assignment of regression variables to experimental groups. The output matches the format of the examples in the maSigPro User's Guide. \n\nmatrix_endo_design$groups.vector\n\nendo_p_vector <- p.vector(t_endo_data, matrix_endo_design, counts = TRUE, theta = 10, Q = 0.10, MT.adjust = \"BH\")\n\n# Record unadjusted p-values \nhead(endo_p_vector$p.vector)\n\n# save output if output has not been saved already\nif (!file.exists(\"../data/p_value_maSigPro_df_2.txt\")) {\n  write.table(endo_p_vector$p.vector, \n              \"../data/p_value_maSigPro_df_2.txt\", sep=\"\\t\")\n}\n\n\n# Find the number of significant genes at FDR 10%\nendo_p_vector$i\n\n# Find the p-value (of the F statistic of the model) at the 10% false discovery control level\n\nhead(endo_p_vector$p.adjusted)\nrownames(p_value_endo_genes_masigpro) <- c(1:500)\nhead(endo_p_vector$SELEC)\n\n# Execute the stepwise (forward) regression. At each regression step, the p-value of each variable is computed and variables get in/out when the p-value is lower/higher than the given cutoff (alfa). \n\nendo_t_stat <- T.fit(endo_p_vector)\n\n\n# p-value of the regression ANOVA, R-squared of the model, and p-value of the regression coefficients of the selected variables\n\nhead(endo_t_stat$sol)\n\n# Obtaining lists of significant genes for each experimental group. We can set and R-squared value so that the models must be greater than 0.2.\n\nendo_sig_genes <- get.siggenes(endo_t_stat, rsq = 0.2, var = \"groups\")\n\n# Get the lists of significant genes\n\n  # The first list (Group.1) contains genes whose expression is significantly different from a 0 profile in the reference group. \n  # The second list (Group.2vsGroup.1) contains differentially expressed curves.  We are most interested in the second list because it contains genes whose profiles for the experimental group is different from the reference group. \n\nnames(endo_sig_genes$sig.genes)\n\nendo_sig_genes$summary\n\nhead(endo_sig_genes$sig.genes$Group.2vsGroup.1)\n\nendo_sig_genes$summary$Group.2vsGroup.1\n\n```\n\n## Visualization with df = 2\n\n```{r}\n# Gene 2\n\nGene2 <- t_endo_data[rownames(t_endo_data) == \"2\", ]\nPlotGroups(Gene2, edesign = final_endo_design, show.fit = T, dis = matrix_endo_design$dis, groups.vector = matrix_endo_design$groups.vector, show.lines = F)\n\n# Gene 108 \n\nGene108 <- t_endo_data[rownames(t_endo_data) == \"108\", ]\nPlotGroups(Gene108, edesign = final_endo_design, show.fit = T, dis = matrix_endo_design$dis, groups.vector = matrix_endo_design$groups.vector, show.lines = F)\n\n# Gene 1\n\nGene1 <- t_endo_data[rownames(t_endo_data) == \"1\", ]\nPlotGroups(Gene1, edesign = final_endo_design, show.fit = T, dis = matrix_endo_design$dis, groups.vector = matrix_endo_design$groups.vector, show.lines = F)\n```\n\n## Compare unadjusted p-value for df = 5 and df = 2\n\n```{r}\n# Obtain unadjusted p-values when df = 2 and when df = 5\n\np_value_maSigPro_df_2 <- read.csv(\"../data/p_value_maSigPro_df_2.txt\", sep=\"\")\n\np_value_maSigPro_df_2 <- as.data.frame(p_value_maSigPro_df_2)\n\ndim(p_value_maSigPro_df_2)\n\np_value_maSigPro_df_5 <- read.csv(\"../data/p_value_maSigPro_df_5.txt\", sep=\"\")\n\np_value_maSigPro_df_5 <- as.data.frame(p_value_maSigPro_df_5)\n\ndim(p_value_maSigPro_df_5)\n\np_value_maSigPro <- cbind(p_value_maSigPro_df_2, p_value_maSigPro_df_5)\ncolnames(p_value_maSigPro) <- c(\"Unadjusted p-value when df = 2\", \n                                \"Unadjusted p-value when df = 5\")\n\n# Correlations with significance levels\nlibrary(Hmisc)\nrc <- rcorr(as.matrix(p_value_maSigPro), type=\"pearson\") # Correlation = 0.7163818 and p = approximately 0\n\nflattenCorrMatrix <- function(cormat, pmat) {\n  ut <- upper.tri(cormat)\n  data.frame(\n    row = rownames(cormat)[row(cormat)[ut]],\n    column = rownames(cormat)[col(cormat)[ut]],\n    cor  =(cormat)[ut],\n    p = pmat[ut]\n    )\n}\n\nflattenCorrMatrix(rc$r, rc$P)\n\n# Compare unadjusted p-values from df = 2 and df = 5\nplot(p_value_maSigPro, \n     main = \"Unadjusted p-values from maSigPro (Pearson's corr. = 0.716)\")\n\n# Make a best fit line (which we can then add to the plot)\nabline(lm(p_value_maSigPro[,1] ~ p_value_maSigPro[,2]))\n```\n\n\n## Session information\n\n```{r info, echo = FALSE}\nsessionInfo()\n```\n\n\n",
    "created" : 1471369129653.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1100087901",
    "id" : "5FCFF559",
    "lastKnownWriteTime" : 1471369205,
    "last_content_update" : 1471369205571,
    "path" : "~/Dropbox/GitHub/diffTimeExpression/analysis/Example_time_series_example_maSigPro.Rmd",
    "project_path" : "Example_time_series_example_maSigPro.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}